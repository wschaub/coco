
 ORG $3000
hello FCN "HELLO WORLD!123456789ABCDEFGHIJK" ; hello world string.
line1 FCN "THIS PROGRAM IS MEANT TO        " 
line2 FCN "SIMULATE TEXT PRINTED TO A TTY  "
speed EQU $FA ; speed in ms for our wait routine. 
tone EQU 1 ;tone value for BASIC SOUND routine
duration EQU 0 ; duration value for BASIC SOUND routine
 ORG $4000
Start:
;Main

 PSHS A,B,X,Y,CC ;save state for future return to basic.
 JSR cls
  
 LDY #$400
again  LDX #hello
 JSR wait
 JSR writesub
 LDX #line1
 JSR wait
 JSR writesub
 LDX #line2
 JSR wait
 JSR writesub
 CMPY #$400+511
 BLO again

 JMP RSDOS

;Copied from CMOC C Library
;calls the BASIC SOUND routine from ROM.
sound:
 PSHS A,B,X
 LDB tone
 STB $8C
 LDB duration 
 CLRA
 LSLB
 ROLA
 LSLB
 ROLA
 PSHS B,A
 LDX #$8D
 LDD ,S++
 STD ,X
 JSR $A956
 STA $ff20
 PULS A,B,X
 RTS

;Waste time
;based on example 12-11 of 6809 Assembly language programming
; by Lance Leventhal. 
wait:
 PSHS A,B,CC
 LDA speed
DLY1 LDB speed ; load in speed in ms
DLY DECB 
 BNE DLY
 DECA 
 BNE DLY1
 PULS A,B,CC
 RTS

; cls subroutine that uses X and D 
; Suggested by Simon Jonassen
cls:
 LDX #$400
; LDD #$FFFF ;orange
 LDD #$8080 ;black
clsloop STD ,X++
 CMPX #$600
 BLO clsloop
 RTS



;writesub writes null terminated string pointed to by X to screen pointed to by Y
;X can point anywhere in ram Y must be between $400 and $400+511
writesub: 
writeloop:
 LDA #60
 STA speed ; set wait loop speed to 100ms
 LDA ,X+ ;grab char from string
; CMPA #00 ;check for null
 BEQ writesubreturn
 CMPY #$400+512 ;test for screen end
 BEQ writesubreturn
 JSR wait 
 JSR sound
 STA ,Y+ ;write char to screen
 JMP writeloop
writesubreturn:
 LDA #250
 STA speed ; set wait loop speed to 250ms
 RTS


;Return to RSDOS
RSDOS PULS A,B,X,Y,CC restore state ;exit to RSDOS
 RTS return to basic 
 END Start
